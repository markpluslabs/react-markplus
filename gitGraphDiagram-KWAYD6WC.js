!function(e,t,r,a,o){var n="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{},i="function"==typeof n[a]&&n[a],c=i.cache||{},s="undefined"!=typeof module&&"function"==typeof module.require&&module.require.bind(module);function m(t,r){if(!c[t]){if(!e[t]){var o="function"==typeof n[a]&&n[a];if(!r&&o)return o(t,!0);if(i)return i(t,!0);if(s&&"string"==typeof t)return s(t);var l=Error("Cannot find module '"+t+"'");throw l.code="MODULE_NOT_FOUND",l}d.resolve=function(r){var a=e[t][1][r];return null!=a?a:r},d.cache={};var h=c[t]=new m.Module(t);e[t][0].call(h.exports,d,h,h.exports,this)}return c[t].exports;function d(e){var t=d.resolve(e);return!1===t?{}:m(t)}}m.isParcelRequire=!0,m.Module=function(e){this.id=e,this.bundle=m,this.exports={}},m.modules=e,m.cache=c,m.parent=i,m.register=function(t,r){e[t]=[function(e,t){t.exports=r},{}]},Object.defineProperty(m,"root",{get:function(){return n[a]}}),n[a]=m;for(var l=0;l<t.length;l++)m(t[l])}({aVa6g:[function(e,t,r){var a=e("@parcel/transformer-js/src/esmodule-helpers.js");a.defineInteropFlag(r),a.export(r,"diagram",()=>ef);var o=e("./chunk-YJGJQOYZ.mjs"),n=e("./chunk-K2ZEYYM2.mjs"),i=e("./chunk-S2G4O3TG.mjs");e("./chunk-DWEQZNRV.mjs"),e("./chunk-W5WXJUCF.mjs"),e("./chunk-S7WIF5TY.mjs");var c=e("./chunk-F3FIDV27.mjs");e("./chunk-GKOISANM.mjs");var s=e("./chunk-ZXHTWV66.mjs");e("./chunk-6PZBHVHY.mjs"),e("./chunk-ZGAMZTAH.mjs"),e("./chunk-U4JKYEUK.mjs"),e("./chunk-TZBO7MLI.mjs"),e("./chunk-GRZAG2UZ.mjs"),e("./chunk-HD3LK5B5.mjs");var m=e("./chunk-DLQEHMXD.mjs"),l={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},h=s.defaultConfig_default.gitGraph,d=/* @__PURE__ */(0,m.__name)(()=>(0,c.cleanAndMerge)({...h,...(0,s.getConfig)().gitGraph}),"getConfig"),$=new o.ImperativeState(()=>{let e=d(),t=e.mainBranchName,r=e.mainBranchOrder;return{mainBranchName:t,commits:/* @__PURE__ */new Map,head:null,branchConfig:/* @__PURE__ */new Map([[t,{name:t,order:r}]]),branches:/* @__PURE__ */new Map([[t,null]]),currBranch:t,direction:"LR",seq:0,options:{}}});function g(){return(0,c.random)({length:7})}function u(e,t){let r=/* @__PURE__ */Object.create(null);return e.reduce((e,a)=>{let o=t(a);return r[o]||(r[o]=!0,e.push(a)),e},[])}(0,m.__name)(g,"getID"),(0,m.__name)(u,"uniqBy");var p=/* @__PURE__ */(0,m.__name)(function(e){$.records.direction=e},"setDirection"),f=/* @__PURE__ */(0,m.__name)(function(e){(0,s.log).debug("options str",e),e=(e=e?.trim())||"{}";try{$.records.options=JSON.parse(e)}catch(e){(0,s.log).error("error while parsing gitGraph options",e.message)}},"setOptions"),y=/* @__PURE__ */(0,m.__name)(function(){return $.records.options},"getOptions"),x=/* @__PURE__ */(0,m.__name)(function(e){let t=e.msg,r=e.id,a=e.type,o=e.tags;(0,s.log).info("commit",t,r,a,o),(0,s.log).debug("Entering commit:",t,r,a,o);let n=d();r=(0,s.common_default).sanitizeText(r,n),t=(0,s.common_default).sanitizeText(t,n),o=o?.map(e=>s.common_default.sanitizeText(e,n));let i={id:r||$.records.seq+"-"+g(),message:t,seq:$.records.seq++,type:a??l.NORMAL,tags:o??[],parents:null==$.records.head?[]:[$.records.head.id],branch:$.records.currBranch};$.records.head=i,(0,s.log).info("main branch",n.mainBranchName),$.records.commits.set(i.id,i),$.records.branches.set($.records.currBranch,i.id),(0,s.log).debug("in pushCommit "+i.id)},"commit"),b=/* @__PURE__ */(0,m.__name)(function(e){let t=e.name,r=e.order;if(t=(0,s.common_default).sanitizeText(t,d()),$.records.branches.has(t))throw Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${t}")`);$.records.branches.set(t,null!=$.records.head?$.records.head.id:null),$.records.branchConfig.set(t,{name:t,order:r}),w(t),(0,s.log).debug("in createBranch")},"branch"),_=/* @__PURE__ */(0,m.__name)(e=>{let t=e.branch,r=e.id,a=e.type,o=e.tags,n=d();t=(0,s.common_default).sanitizeText(t,n),r&&(r=(0,s.common_default).sanitizeText(r,n));let i=$.records.branches.get($.records.currBranch),c=$.records.branches.get(t),m=i?$.records.commits.get(i):void 0,h=c?$.records.commits.get(c):void 0;if(m&&h&&m.branch===t)throw Error(`Cannot merge branch '${t}' into itself.`);if($.records.currBranch===t){let e=Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw e.hash={text:`merge ${t}`,token:`merge ${t}`,expected:["branch abc"]},e}if(void 0===m||!m){let e=Error(`Incorrect usage of "merge". Current branch (${$.records.currBranch})has no commits`);throw e.hash={text:`merge ${t}`,token:`merge ${t}`,expected:["commit"]},e}if(!$.records.branches.has(t)){let e=Error('Incorrect usage of "merge". Branch to be merged ('+t+") does not exist");throw e.hash={text:`merge ${t}`,token:`merge ${t}`,expected:[`branch ${t}`]},e}if(void 0===h||!h){let e=Error('Incorrect usage of "merge". Branch to be merged ('+t+") has no commits");throw e.hash={text:`merge ${t}`,token:`merge ${t}`,expected:['"commit"']},e}if(m===h){let e=Error('Incorrect usage of "merge". Both branches have same head');throw e.hash={text:`merge ${t}`,token:`merge ${t}`,expected:["branch abc"]},e}if(r&&$.records.commits.has(r)){let e=Error('Incorrect usage of "merge". Commit with id:'+r+" already exists, use different custom Id");throw e.hash={text:`merge ${t} ${r} ${a} ${o?.join(" ")}`,token:`merge ${t} ${r} ${a} ${o?.join(" ")}`,expected:[`merge ${t} ${r}_UNIQUE ${a} ${o?.join(" ")}`]},e}let u={id:r||`${$.records.seq}-${g()}`,message:`merged branch ${t} into ${$.records.currBranch}`,seq:$.records.seq++,parents:null==$.records.head?[]:[$.records.head.id,c||""],branch:$.records.currBranch,type:l.MERGE,customType:a,customId:!!r,tags:o??[]};$.records.head=u,$.records.commits.set(u.id,u),$.records.branches.set($.records.currBranch,u.id),(0,s.log).debug($.records.branches),(0,s.log).debug("in mergeBranch")},"merge"),k=/* @__PURE__ */(0,m.__name)(function(e){let t=e.id,r=e.targetId,a=e.tags,o=e.parent;(0,s.log).debug("Entering cherryPick:",t,r,a);let n=d();if(t=(0,s.common_default).sanitizeText(t,n),r=(0,s.common_default).sanitizeText(r,n),a=a?.map(e=>s.common_default.sanitizeText(e,n)),o=(0,s.common_default).sanitizeText(o,n),!t||!$.records.commits.has(t)){let e=Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw e.hash={text:`cherryPick ${t} ${r}`,token:`cherryPick ${t} ${r}`,expected:["cherry-pick abc"]},e}let i=$.records.commits.get(t);if(void 0===i||!i)throw Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(o&&!(Array.isArray(i.parents)&&i.parents.includes(o)))throw Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.");let c=i.branch;if(i.type===l.MERGE&&!o)throw Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.");if(!r||!$.records.commits.has(r)){if(c===$.records.currBranch){let e=Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw e.hash={text:`cherryPick ${t} ${r}`,token:`cherryPick ${t} ${r}`,expected:["cherry-pick abc"]},e}let e=$.records.branches.get($.records.currBranch);if(void 0===e||!e){let e=Error(`Incorrect usage of "cherry-pick". Current branch (${$.records.currBranch})has no commits`);throw e.hash={text:`cherryPick ${t} ${r}`,token:`cherryPick ${t} ${r}`,expected:["cherry-pick abc"]},e}let n=$.records.commits.get(e);if(void 0===n||!n){let e=Error(`Incorrect usage of "cherry-pick". Current branch (${$.records.currBranch})has no commits`);throw e.hash={text:`cherryPick ${t} ${r}`,token:`cherryPick ${t} ${r}`,expected:["cherry-pick abc"]},e}let m={id:$.records.seq+"-"+g(),message:`cherry-picked ${i?.message} into ${$.records.currBranch}`,seq:$.records.seq++,parents:null==$.records.head?[]:[$.records.head.id,i.id],branch:$.records.currBranch,type:l.CHERRY_PICK,tags:a?a.filter(Boolean):[`cherry-pick:${i.id}${i.type===l.MERGE?`|parent:${o}`:""}`]};$.records.head=m,$.records.commits.set(m.id,m),$.records.branches.set($.records.currBranch,m.id),(0,s.log).debug($.records.branches),(0,s.log).debug("in cherryPick")}},"cherryPick"),w=/* @__PURE__ */(0,m.__name)(function(e){if(e=(0,s.common_default).sanitizeText(e,d()),$.records.branches.has(e)){$.records.currBranch=e;let t=$.records.branches.get($.records.currBranch);void 0!==t&&t?$.records.head=$.records.commits.get(t)??null:$.records.head=null}else{let t=Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${e}")`);throw t.hash={text:`checkout ${e}`,token:`checkout ${e}`,expected:[`branch ${e}`]},t}},"checkout");function E(e,t,r){let a=e.indexOf(t);-1===a?e.push(r):e.splice(a,1,r)}function B(e){let t=e.reduce((e,t)=>e.seq>t.seq?e:t,e[0]),r="";e.forEach(function(e){e===t?r+="	*":r+="	|"});let a=[r,t.id,t.seq];for(let e in $.records.branches)$.records.branches.get(e)===t.id&&a.push(e);if((0,s.log).debug(a.join(" ")),t.parents&&2==t.parents.length&&t.parents[0]&&t.parents[1]){let r=$.records.commits.get(t.parents[0]);E(e,t,r),t.parents[1]&&e.push($.records.commits.get(t.parents[1]))}else if(0==t.parents.length)return;else if(t.parents[0]){let r=$.records.commits.get(t.parents[0]);E(e,t,r)}B(e=u(e,e=>e.id))}(0,m.__name)(E,"upsert"),(0,m.__name)(B,"prettyPrintCommitHistory");var T=/* @__PURE__ */(0,m.__name)(function(){(0,s.log).debug($.records.commits),B([j()[0]])},"prettyPrint"),L=/* @__PURE__ */(0,m.__name)(function(){$.reset(),(0,s.clear)()},"clear"),C=/* @__PURE__ */(0,m.__name)(function(){return[...$.records.branchConfig.values()].map((e,t)=>null!==e.order&&void 0!==e.order?e:{...e,order:parseFloat(`0.${t}`)}).sort((e,t)=>(e.order??0)-(t.order??0)).map(({name:e})=>({name:e}))},"getBranchesAsObjArray"),M=/* @__PURE__ */(0,m.__name)(function(){return $.records.branches},"getBranches"),v=/* @__PURE__ */(0,m.__name)(function(){return $.records.commits},"getCommits"),j=/* @__PURE__ */(0,m.__name)(function(){let e=[...$.records.commits.values()];return e.forEach(function(e){(0,s.log).debug(e.id)}),e.sort((e,t)=>e.seq-t.seq),e},"getCommitsArray"),I={commitType:l,getConfig:d,setDirection:p,setOptions:f,getOptions:y,commit:x,branch:b,merge:_,cherryPick:k,checkout:w,prettyPrint:T,clear:L,getBranchesAsObjArray:C,getBranches:M,getCommits:v,getCommitsArray:j,getCurrentBranch:/* @__PURE__ */(0,m.__name)(function(){return $.records.currBranch},"getCurrentBranch"),getDirection:/* @__PURE__ */(0,m.__name)(function(){return $.records.direction},"getDirection"),getHead:/* @__PURE__ */(0,m.__name)(function(){return $.records.head},"getHead"),setAccTitle:s.setAccTitle,getAccTitle:s.getAccTitle,getAccDescription:s.getAccDescription,setAccDescription:s.setAccDescription,setDiagramTitle:s.setDiagramTitle,getDiagramTitle:s.getDiagramTitle},R=/* @__PURE__ */(0,m.__name)((e,t)=>{for(let r of((0,n.populateCommonDb)(e,t),e.dir&&t.setDirection(e.dir),e.statements))G(r,t)},"populate"),G=/* @__PURE__ */(0,m.__name)((e,t)=>{let r={Commit:/* @__PURE__ */(0,m.__name)(e=>t.commit(A(e)),"Commit"),Branch:/* @__PURE__ */(0,m.__name)(e=>t.branch(P(e)),"Branch"),Merge:/* @__PURE__ */(0,m.__name)(e=>t.merge(D(e)),"Merge"),Checkout:/* @__PURE__ */(0,m.__name)(e=>t.checkout(O(e)),"Checkout"),CherryPicking:/* @__PURE__ */(0,m.__name)(e=>t.cherryPick(H(e)),"CherryPicking")}[e.$type];r?r(e):(0,s.log).error(`Unknown statement type: ${e.$type}`)},"parseStatement"),A=/* @__PURE__ */(0,m.__name)(e=>({id:e.id,msg:e.message??"",type:void 0!==e.type?l[e.type]:l.NORMAL,tags:e.tags??void 0}),"parseCommit"),P=/* @__PURE__ */(0,m.__name)(e=>({name:e.name,order:e.order??0}),"parseBranch"),D=/* @__PURE__ */(0,m.__name)(e=>({branch:e.branch,id:e.id??"",type:void 0!==e.type?l[e.type]:void 0,tags:e.tags??void 0}),"parseMerge"),O=/* @__PURE__ */(0,m.__name)(e=>e.branch,"parseCheckout"),H=/* @__PURE__ */(0,m.__name)(e=>({id:e.id,targetId:"",tags:e.tags?.length===0?void 0:e.tags,parent:e.parent}),"parseCherryPicking"),q={parse:/* @__PURE__ */(0,m.__name)(async e=>{let t=await (0,i.parse)("gitGraph",e);(0,s.log).debug(t),R(t,I)},"parse")},S=(0,s.getConfig2)(),F=S?.gitGraph,W=/* @__PURE__ */new Map,z=/* @__PURE__ */new Map,N=/* @__PURE__ */new Map,Z=[],Y=0,K="LR",X=/* @__PURE__ */(0,m.__name)(()=>{W.clear(),z.clear(),N.clear(),Y=0,Z=[],K="LR"},"clear"),Q=/* @__PURE__ */(0,m.__name)(e=>{let t=document.createElementNS("http://www.w3.org/2000/svg","text");return("string"==typeof e?e.split(/\\n|\n|<br\s*\/?>/gi):e).forEach(e=>{let r=document.createElementNS("http://www.w3.org/2000/svg","tspan");r.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),r.setAttribute("dy","1em"),r.setAttribute("x","0"),r.setAttribute("class","row"),r.textContent=e.trim(),t.appendChild(r)}),t},"drawText"),U=/* @__PURE__ */(0,m.__name)(e=>{let t,r,a;return"BT"===K?(r=/* @__PURE__ */(0,m.__name)((e,t)=>e<=t,"comparisonFunc"),a=1/0):(r=/* @__PURE__ */(0,m.__name)((e,t)=>e>=t,"comparisonFunc"),a=0),e.forEach(e=>{let o="TB"===K||"BT"==K?z.get(e)?.y:z.get(e)?.x;void 0!==o&&r(o,a)&&(t=e,a=o)}),t},"findClosestParent"),V=/* @__PURE__ */(0,m.__name)(e=>{let t="",r=1/0;return e.forEach(e=>{let a=z.get(e).y;a<=r&&(t=e,r=a)}),t||void 0},"findClosestParentBT"),J=/* @__PURE__ */(0,m.__name)((e,t,r)=>{let a=r,o=r,n=[];e.forEach(e=>{let r=t.get(e);if(!r)throw Error(`Commit not found for key ${e}`);r.parents.length?o=Math.max(a=et(r),o):n.push(r),er(r,a)}),a=o,n.forEach(e=>{ea(e,a,r)}),e.forEach(e=>{let r=t.get(e);if(r?.parents.length){let e=V(r.parents);(a=z.get(e).y-40)<=o&&(o=a);let t=W.get(r.branch).pos,n=a-10;z.set(r.id,{x:t,y:n})}})},"setParallelBTPos"),ee=/* @__PURE__ */(0,m.__name)(e=>{let t=U(e.parents.filter(e=>null!==e));if(!t)throw Error(`Closest parent not found for commit ${e.id}`);let r=z.get(t)?.y;if(void 0===r)throw Error(`Closest parent position not found for commit ${e.id}`);return r},"findClosestParentPos"),et=/* @__PURE__ */(0,m.__name)(e=>ee(e)+40,"calculateCommitPosition"),er=/* @__PURE__ */(0,m.__name)((e,t)=>{let r=W.get(e.branch);if(!r)throw Error(`Branch not found for commit ${e.id}`);let a=r.pos,o=t+10;return z.set(e.id,{x:a,y:o}),{x:a,y:o}},"setCommitPosition"),ea=/* @__PURE__ */(0,m.__name)((e,t,r)=>{let a=W.get(e.branch);if(!a)throw Error(`Branch not found for commit ${e.id}`);let o=a.pos;z.set(e.id,{x:o,y:t+r})},"setRootPosition"),eo=/* @__PURE__ */(0,m.__name)((e,t,r,a,o,n)=>{if(n===l.HIGHLIGHT)e.append("rect").attr("x",r.x-10).attr("y",r.y-10).attr("width",20).attr("height",20).attr("class",`commit ${t.id} commit-highlight${o%8} ${a}-outer`),e.append("rect").attr("x",r.x-6).attr("y",r.y-6).attr("width",12).attr("height",12).attr("class",`commit ${t.id} commit${o%8} ${a}-inner`);else if(n===l.CHERRY_PICK)e.append("circle").attr("cx",r.x).attr("cy",r.y).attr("r",10).attr("class",`commit ${t.id} ${a}`),e.append("circle").attr("cx",r.x-3).attr("cy",r.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${t.id} ${a}`),e.append("circle").attr("cx",r.x+3).attr("cy",r.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${t.id} ${a}`),e.append("line").attr("x1",r.x+3).attr("y1",r.y+1).attr("x2",r.x).attr("y2",r.y-5).attr("stroke","#fff").attr("class",`commit ${t.id} ${a}`),e.append("line").attr("x1",r.x-3).attr("y1",r.y+1).attr("x2",r.x).attr("y2",r.y-5).attr("stroke","#fff").attr("class",`commit ${t.id} ${a}`);else{let i=e.append("circle");if(i.attr("cx",r.x),i.attr("cy",r.y),i.attr("r",t.type===l.MERGE?9:10),i.attr("class",`commit ${t.id} commit${o%8}`),n===l.MERGE){let n=e.append("circle");n.attr("cx",r.x),n.attr("cy",r.y),n.attr("r",6),n.attr("class",`commit ${a} ${t.id} commit${o%8}`)}n===l.REVERSE&&e.append("path").attr("d",`M ${r.x-5},${r.y-5}L${r.x+5},${r.y+5}M${r.x-5},${r.y+5}L${r.x+5},${r.y-5}`).attr("class",`commit ${a} ${t.id} commit${o%8}`)}},"drawCommitBullet"),en=/* @__PURE__ */(0,m.__name)((e,t,r,a)=>{if(t.type!==l.CHERRY_PICK&&(t.customId&&t.type===l.MERGE||t.type!==l.MERGE)&&F?.showCommitLabel){let o=e.append("g"),n=o.insert("rect").attr("class","commit-label-bkg"),i=o.append("text").attr("x",a).attr("y",r.y+25).attr("class","commit-label").text(t.id),c=i.node()?.getBBox();if(c&&(n.attr("x",r.posWithOffset-c.width/2-2).attr("y",r.y+13.5).attr("width",c.width+4).attr("height",c.height+4),"TB"===K||"BT"===K?(n.attr("x",r.x-(c.width+16+5)).attr("y",r.y-12),i.attr("x",r.x-(c.width+16)).attr("y",r.y+c.height-12)):i.attr("x",r.posWithOffset-c.width/2),F.rotateCommitLabel)){if("TB"===K||"BT"===K)i.attr("transform","rotate(-45, "+r.x+", "+r.y+")"),n.attr("transform","rotate(-45, "+r.x+", "+r.y+")");else{let e=-7.5-(c.width+10)/25*9.5,t=10+c.width/25*8.5;o.attr("transform","translate("+e+", "+t+") rotate(-45, "+a+", "+r.y+")")}}}},"drawCommitLabel"),ei=/* @__PURE__ */(0,m.__name)((e,t,r,a)=>{if(t.tags.length>0){let o=0,n=0,i=0,c=[];for(let a of t.tags.reverse()){let t=e.insert("polygon"),s=e.append("circle"),m=e.append("text").attr("y",r.y-16-o).attr("class","tag-label").text(a),l=m.node()?.getBBox();if(!l)throw Error("Tag bbox not found");n=Math.max(n,l.width),i=Math.max(i,l.height),m.attr("x",r.posWithOffset-l.width/2),c.push({tag:m,hole:s,rect:t,yOffset:o}),o+=20}for(let{tag:e,hole:t,rect:o,yOffset:s}of c){let c=i/2,m=r.y-19.2-s;if(o.attr("class","tag-label-bkg").attr("points",`
      ${a-n/2-2},${m+2}  
      ${a-n/2-2},${m-2}
      ${r.posWithOffset-n/2-4},${m-c-2}
      ${r.posWithOffset+n/2+4},${m-c-2}
      ${r.posWithOffset+n/2+4},${m+c+2}
      ${r.posWithOffset-n/2-4},${m+c+2}`),t.attr("cy",m).attr("cx",a-n/2+2).attr("r",1.5).attr("class","tag-hole"),"TB"===K||"BT"===K){let i=a+s;o.attr("class","tag-label-bkg").attr("points",`
        ${r.x},${i+2}
        ${r.x},${i-2}
        ${r.x+10},${i-c-2}
        ${r.x+10+n+4},${i-c-2}
        ${r.x+10+n+4},${i+c+2}
        ${r.x+10},${i+c+2}`).attr("transform","translate(12,12) rotate(45, "+r.x+","+a+")"),t.attr("cx",r.x+2).attr("cy",i).attr("transform","translate(12,12) rotate(45, "+r.x+","+a+")"),e.attr("x",r.x+5).attr("y",i+3).attr("transform","translate(14,14) rotate(45, "+r.x+","+a+")")}}}},"drawCommitTags"),ec=/* @__PURE__ */(0,m.__name)(e=>{switch(e.customType??e.type){case l.NORMAL:return"commit-normal";case l.REVERSE:return"commit-reverse";case l.HIGHLIGHT:return"commit-highlight";case l.MERGE:return"commit-merge";case l.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}},"getCommitClassType"),es=/* @__PURE__ */(0,m.__name)((e,t,r,a)=>{let o={x:0,y:0};if(e.parents.length>0){let r=U(e.parents);if(r){let n=a.get(r)??o;return"TB"===t?n.y+40:"BT"===t?(a.get(e.id)??o).y-40:n.x+40}}else{if("TB"===t)return 30;if("BT"===t)return(a.get(e.id)??o).y-40}return 0},"calculatePosition"),em=/* @__PURE__ */(0,m.__name)((e,t,r)=>{let a="BT"===K&&r?t:t+10,o="TB"===K||"BT"===K?a:W.get(e.branch)?.pos,n="TB"===K||"BT"===K?W.get(e.branch)?.pos:a;if(void 0===n||void 0===o)throw Error(`Position were undefined for commit ${e.id}`);return{x:n,y:o,posWithOffset:a}},"getCommitPosition"),el=/* @__PURE__ */(0,m.__name)((e,t,r)=>{if(!F)throw Error("GitGraph config not found");let a=e.append("g").attr("class","commit-bullets"),o=e.append("g").attr("class","commit-labels"),n="TB"===K||"BT"===K?30:0,i=[...t.keys()],c=F?.parallelCommits??!1,s=i.sort(/* @__PURE__ */(0,m.__name)((e,r)=>{let a=t.get(e)?.seq,o=t.get(r)?.seq;return void 0!==a&&void 0!==o?a-o:0},"sortKeys"));"BT"===K&&(c&&J(s,t,n),s=s.reverse()),s.forEach(e=>{let i=t.get(e);if(!i)throw Error(`Commit not found for key ${e}`);c&&(n=es(i,K,n,z));let s=em(i,n,c);if(r){let e=ec(i),t=i.customType??i.type,r=W.get(i.branch)?.index??0;eo(a,i,s,e,r,t),en(o,i,s,n),ei(o,i,s,n)}"TB"===K||"BT"===K?z.set(i.id,{x:s.x,y:s.posWithOffset}):z.set(i.id,{x:s.posWithOffset,y:s.y}),(n="BT"===K&&c?n+40:n+40+10)>Y&&(Y=n)})},"drawCommits"),eh=/* @__PURE__ */(0,m.__name)((e,t,r,a,o)=>{let n=("TB"===K||"BT"===K?r.x<a.x:r.y<a.y)?t.branch:e.branch,i=/* @__PURE__ */(0,m.__name)(e=>e.branch===n,"isOnBranchToGetCurve"),c=/* @__PURE__ */(0,m.__name)(r=>r.seq>e.seq&&r.seq<t.seq,"isBetweenCommits");return[...o.values()].some(e=>c(e)&&i(e))},"shouldRerouteArrow"),ed=/* @__PURE__ */(0,m.__name)((e,t,r=0)=>{let a=e+Math.abs(e-t)/2;if(r>5)return a;if(Z.every(e=>Math.abs(e-a)>=10))return Z.push(a),a;let o=Math.abs(e-t);return ed(e,t-o/5,r+1)},"findLane"),e$=/* @__PURE__ */(0,m.__name)((e,t,r,a)=>{let o;let n=z.get(t.id),i=z.get(r.id);if(void 0===n||void 0===i)throw Error(`Commit positions not found for commits ${t.id} and ${r.id}`);let c=eh(t,r,n,i,a),s="",m="",h=0,d=0,$=W.get(r.branch)?.index;if(r.type===l.MERGE&&t.id!==r.parents[0]&&($=W.get(t.branch)?.index),c){s="A 10 10, 0, 0, 0,",m="A 10 10, 0, 0, 1,",h=10,d=10;let e=n.y<i.y?ed(n.y,i.y):ed(i.y,n.y),r=n.x<i.x?ed(n.x,i.x):ed(i.x,n.x);"TB"===K?n.x<i.x?o=`M ${n.x} ${n.y} L ${r-h} ${n.y} ${m} ${r} ${n.y+d} L ${r} ${i.y-h} ${s} ${r+d} ${i.y} L ${i.x} ${i.y}`:($=W.get(t.branch)?.index,o=`M ${n.x} ${n.y} L ${r+h} ${n.y} ${s} ${r} ${n.y+d} L ${r} ${i.y-h} ${m} ${r-d} ${i.y} L ${i.x} ${i.y}`):"BT"===K?n.x<i.x?o=`M ${n.x} ${n.y} L ${r-h} ${n.y} ${s} ${r} ${n.y-d} L ${r} ${i.y+h} ${m} ${r+d} ${i.y} L ${i.x} ${i.y}`:($=W.get(t.branch)?.index,o=`M ${n.x} ${n.y} L ${r+h} ${n.y} ${m} ${r} ${n.y-d} L ${r} ${i.y+h} ${s} ${r-d} ${i.y} L ${i.x} ${i.y}`):n.y<i.y?o=`M ${n.x} ${n.y} L ${n.x} ${e-h} ${s} ${n.x+d} ${e} L ${i.x-h} ${e} ${m} ${i.x} ${e+d} L ${i.x} ${i.y}`:($=W.get(t.branch)?.index,o=`M ${n.x} ${n.y} L ${n.x} ${e+h} ${m} ${n.x+d} ${e} L ${i.x-h} ${e} ${s} ${i.x} ${e-d} L ${i.x} ${i.y}`)}else s="A 20 20, 0, 0, 0,",m="A 20 20, 0, 0, 1,",h=20,d=20,"TB"===K?(n.x<i.x&&(o=r.type===l.MERGE&&t.id!==r.parents[0]?`M ${n.x} ${n.y} L ${n.x} ${i.y-h} ${s} ${n.x+d} ${i.y} L ${i.x} ${i.y}`:`M ${n.x} ${n.y} L ${i.x-h} ${n.y} ${m} ${i.x} ${n.y+d} L ${i.x} ${i.y}`),n.x>i.x&&(s="A 20 20, 0, 0, 0,",m="A 20 20, 0, 0, 1,",h=20,d=20,o=r.type===l.MERGE&&t.id!==r.parents[0]?`M ${n.x} ${n.y} L ${n.x} ${i.y-h} ${m} ${n.x-d} ${i.y} L ${i.x} ${i.y}`:`M ${n.x} ${n.y} L ${i.x+h} ${n.y} ${s} ${i.x} ${n.y+d} L ${i.x} ${i.y}`),n.x===i.x&&(o=`M ${n.x} ${n.y} L ${i.x} ${i.y}`)):"BT"===K?(n.x<i.x&&(o=r.type===l.MERGE&&t.id!==r.parents[0]?`M ${n.x} ${n.y} L ${n.x} ${i.y+h} ${m} ${n.x+d} ${i.y} L ${i.x} ${i.y}`:`M ${n.x} ${n.y} L ${i.x-h} ${n.y} ${s} ${i.x} ${n.y-d} L ${i.x} ${i.y}`),n.x>i.x&&(s="A 20 20, 0, 0, 0,",m="A 20 20, 0, 0, 1,",h=20,d=20,o=r.type===l.MERGE&&t.id!==r.parents[0]?`M ${n.x} ${n.y} L ${n.x} ${i.y+h} ${s} ${n.x-d} ${i.y} L ${i.x} ${i.y}`:`M ${n.x} ${n.y} L ${i.x-h} ${n.y} ${s} ${i.x} ${n.y-d} L ${i.x} ${i.y}`),n.x===i.x&&(o=`M ${n.x} ${n.y} L ${i.x} ${i.y}`)):(n.y<i.y&&(o=r.type===l.MERGE&&t.id!==r.parents[0]?`M ${n.x} ${n.y} L ${i.x-h} ${n.y} ${m} ${i.x} ${n.y+d} L ${i.x} ${i.y}`:`M ${n.x} ${n.y} L ${n.x} ${i.y-h} ${s} ${n.x+d} ${i.y} L ${i.x} ${i.y}`),n.y>i.y&&(o=r.type===l.MERGE&&t.id!==r.parents[0]?`M ${n.x} ${n.y} L ${i.x-h} ${n.y} ${s} ${i.x} ${n.y-d} L ${i.x} ${i.y}`:`M ${n.x} ${n.y} L ${n.x} ${i.y+h} ${m} ${n.x+d} ${i.y} L ${i.x} ${i.y}`),n.y===i.y&&(o=`M ${n.x} ${n.y} L ${i.x} ${i.y}`));if(void 0===o)throw Error("Line definition not found");e.append("path").attr("d",o).attr("class","arrow arrow"+$%8)},"drawArrow"),eg=/* @__PURE__ */(0,m.__name)((e,t)=>{let r=e.append("g").attr("class","commit-arrows");[...t.keys()].forEach(e=>{let a=t.get(e);a.parents&&a.parents.length>0&&a.parents.forEach(e=>{e$(r,t.get(e),a,t)})})},"drawArrows"),eu=/* @__PURE__ */(0,m.__name)((e,t)=>{let r=e.append("g");t.forEach((e,t)=>{let a=t%8,o=W.get(e.name)?.pos;if(void 0===o)throw Error(`Position not found for branch ${e.name}`);let n=r.append("line");n.attr("x1",0),n.attr("y1",o),n.attr("x2",Y),n.attr("y2",o),n.attr("class","branch branch"+a),"TB"===K?(n.attr("y1",30),n.attr("x1",o),n.attr("y2",Y),n.attr("x2",o)):"BT"===K&&(n.attr("y1",Y),n.attr("x1",o),n.attr("y2",30),n.attr("x2",o)),Z.push(o);let i=Q(e.name),c=r.insert("rect"),s=r.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+a);s.node().appendChild(i);let m=i.getBBox();c.attr("class","branchLabelBkg label"+a).attr("rx",4).attr("ry",4).attr("x",-m.width-4-(F?.rotateCommitLabel===!0?30:0)).attr("y",-m.height/2+8).attr("width",m.width+18).attr("height",m.height+4),s.attr("transform","translate("+(-m.width-14-(F?.rotateCommitLabel===!0?30:0))+", "+(o-m.height/2-1)+")"),"TB"===K?(c.attr("x",o-m.width/2-10).attr("y",0),s.attr("transform","translate("+(o-m.width/2-5)+", 0)")):"BT"===K?(c.attr("x",o-m.width/2-10).attr("y",Y),s.attr("transform","translate("+(o-m.width/2-5)+", "+Y+")")):c.attr("transform","translate(-19, "+(o-m.height/2)+")")})},"drawBranches"),ep=/* @__PURE__ */(0,m.__name)(function(e,t,r,a,o){return W.set(e,{pos:t,index:r}),t+=50+(o?40:0)+("TB"===K||"BT"===K?a.width/2:0)},"setBranchPosition"),ef={parser:q,db:I,renderer:{draw:/* @__PURE__ */(0,m.__name)(function(e,t,r,a){if(X(),(0,s.log).debug("in gitgraph renderer",e+"\n","id:",t,r),!F)throw Error("GitGraph config not found");let o=F.rotateCommitLabel??!1,n=a.db;N=n.getCommits();let i=n.getBranchesAsObjArray();K=n.getDirection();let m=(0,s.select_default)(`[id="${t}"]`),l=0;i.forEach((e,t)=>{let r=Q(e.name),a=m.append("g"),n=a.insert("g").attr("class","branchLabel"),i=n.insert("g").attr("class","label branch-label");i.node()?.appendChild(r);let c=r.getBBox();l=ep(e.name,l,t,c,o),i.remove(),n.remove(),a.remove()}),el(m,N,!1),F.showBranches&&eu(m,i),eg(m,N),el(m,N,!0),(0,c.utils_default).insertTitle(m,"gitTitleText",F.titleTopMargin??0,n.getDiagramTitle()),(0,s.setupGraphViewbox2)(void 0,m,F.diagramPadding,F.useMaxWidth)},"draw")},styles:/* @__PURE__ */(0,m.__name)(e=>`
  .commit-id,
  .commit-msg,
  .branch-label {
    fill: lightgrey;
    color: lightgrey;
    font-family: 'trebuchet ms', verdana, arial, sans-serif;
    font-family: var(--mermaid-font-family);
  }
  ${[0,1,2,3,4,5,6,7].map(t=>`
        .branch-label${t} { fill: ${e["gitBranchLabel"+t]}; }
        .commit${t} { stroke: ${e["git"+t]}; fill: ${e["git"+t]}; }
        .commit-highlight${t} { stroke: ${e["gitInv"+t]}; fill: ${e["gitInv"+t]}; }
        .label${t}  { fill: ${e["git"+t]}; }
        .arrow${t} { stroke: ${e["git"+t]}; }
        `).join("\n")}

  .branch {
    stroke-width: 1;
    stroke: ${e.lineColor};
    stroke-dasharray: 2;
  }
  .commit-label { font-size: ${e.commitLabelFontSize}; fill: ${e.commitLabelColor};}
  .commit-label-bkg { font-size: ${e.commitLabelFontSize}; fill: ${e.commitLabelBackground}; opacity: 0.5; }
  .tag-label { font-size: ${e.tagLabelFontSize}; fill: ${e.tagLabelColor};}
  .tag-label-bkg { fill: ${e.tagLabelBackground}; stroke: ${e.tagLabelBorder}; }
  .tag-hole { fill: ${e.textColor}; }

  .commit-merge {
    stroke: ${e.primaryColor};
    fill: ${e.primaryColor};
  }
  .commit-reverse {
    stroke: ${e.primaryColor};
    fill: ${e.primaryColor};
    stroke-width: 3;
  }
  .commit-highlight-outer {
  }
  .commit-highlight-inner {
    stroke: ${e.primaryColor};
    fill: ${e.primaryColor};
  }

  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}
  .gitTitleText {
    text-anchor: middle;
    font-size: 18px;
    fill: ${e.textColor};
  }
`,"getStyles")}},{"./chunk-YJGJQOYZ.mjs":"dqSnw","./chunk-K2ZEYYM2.mjs":"MWQ3J","./chunk-S2G4O3TG.mjs":"dDNEE","./chunk-DWEQZNRV.mjs":"iFleL","./chunk-W5WXJUCF.mjs":"cNvOT","./chunk-S7WIF5TY.mjs":"gFBIs","./chunk-F3FIDV27.mjs":"4aBfS","./chunk-GKOISANM.mjs":"9F7Gp","./chunk-ZXHTWV66.mjs":"iF86s","./chunk-6PZBHVHY.mjs":"1MOSN","./chunk-ZGAMZTAH.mjs":"bzkx3","./chunk-U4JKYEUK.mjs":"8jgcc","./chunk-TZBO7MLI.mjs":"9m8dA","./chunk-GRZAG2UZ.mjs":"4I8cr","./chunk-HD3LK5B5.mjs":"cz0yX","./chunk-DLQEHMXD.mjs":"1MRh8","@parcel/transformer-js/src/esmodule-helpers.js":"XTfsy"}],dqSnw:[function(e,t,r){var a=e("@parcel/transformer-js/src/esmodule-helpers.js");a.defineInteropFlag(r),a.export(r,"ImperativeState",()=>n);var o=e("./chunk-DLQEHMXD.mjs"),n=class{constructor(e){this.init=e,this.records=this.init()}static{(0,o.__name)(this,"ImperativeState")}reset(){this.records=this.init()}}},{"./chunk-DLQEHMXD.mjs":"1MRh8","@parcel/transformer-js/src/esmodule-helpers.js":"XTfsy"}],MWQ3J:[function(e,t,r){var a=e("@parcel/transformer-js/src/esmodule-helpers.js");function o(e,t){e.accDescr&&t.setAccDescription?.(e.accDescr),e.accTitle&&t.setAccTitle?.(e.accTitle),e.title&&t.setDiagramTitle?.(e.title)}a.defineInteropFlag(r),a.export(r,"populateCommonDb",()=>o),(0,e("./chunk-DLQEHMXD.mjs").__name)(o,"populateCommonDb")},{"./chunk-DLQEHMXD.mjs":"1MRh8","@parcel/transformer-js/src/esmodule-helpers.js":"XTfsy"}]},[],0,"parcelRequire20b6");